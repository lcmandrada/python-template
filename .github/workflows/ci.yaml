name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - 'release/**'
      - 'story/**'

jobs:
  build:
    strategy:
      matrix:
        python-version: [3.9.2]
        poetry-version: [1.0.10]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

        # Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

        # Environment Variables
      - name: Set environment variables
        uses: allenevans/set-env@v2.0.0
        with:
          ORG: ${{ secrets.ORG }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CA_CRT: ${{ secrets.CA_CRT }}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}
          TLS_KEY: ${{ secrets.TLS_KEY }}

        # VPN configurations
      - name: Write VPN Files
        run: |
          echo "$CA_CRT" >> .github/vpn/config.ovpn
          echo "$USER_CRT" >> .github/vpn/config.ovpn
          echo "$USER_KEY" >> .github/vpn/config.ovpn
          echo "$TLS_KEY" >> .github/vpn/config.ovpn
    
        # OpenVPN
      - name: Install Open VPN
        run: |
          sudo apt update
          sudo apt install openvpn -y

      - name: Start Open VPN
        run: sudo openvpn --connect-retry-max 3 --config .github/vpn/config.ovpn --daemon

        # Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          # Important for caching Poetry virtual environment.
          virtualenvs-create: true
          virtualenvs-in-project: true

        # Private repository
      - name: Setup Nexus For Poetry
        run: poetry config repositories.org url

      - name: Setup Nexus Credentials For Poetry
        run: poetry config http-basic.$ORG $USERNAME $PASSWORD

        # Cached environment
      - name: Load Cached Poetry venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

        # Install
      - name: Install Project Dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

        # Checks and tests
      - name: Run Code Linter with Flake8
        run: poetry run flake8 src tests

      - name: Run Package Sort Checker with isort
        run: poetry run isort --check src tests

      - name: Run Code Style Checker with Black
        run: poetry run black . --check

      - name: Run Static Type Checker with Mypy
        run: poetry run mypy .

      - name: Run tests with Pytest
        run: poetry run pytest

        # Docker
      - name: Build Docker Image
        run: docker build --tag service:gh-build-${{ github.run_number }} . --build-arg args

        # AWS ECR
      - name: Push to AWS ECR
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ap-southeast-1
          image: repository:gh-build-${{ github.run_number }}
